{"version":3,"sources":["ElfHeader.js","App.js","serviceWorker.js","index.js"],"names":["ElfHeader","react_default","a","createElement","className","Component","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","runScript","path","script","that","assertThisInitialized","fetch","then","response","json","console","log","allData","result","code","error","info","regex1","RegExp","array1","exec","concat","setState","catch","ex","handleChange","event","selectedValue","target","value","endPointIndex","getAttribute","objectSpread","state","handleSubmit","dataEndPoints","preventDefault","radioWeb","onSubmit","type","name","data-endpoint","id","onChange","htmlFor","src_ElfHeader","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.60a7973c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass ElfHeader extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <h1>System Check - EC2</h1>\n            </div>\n        );\n    }\n}\nexport default ElfHeader;\n","import React, { Component } from 'react';\nimport './App.css';\nimport ElfHeader from './ElfHeader';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.dataEndPoints = [\n            '/script-pusher/run-script?script=',\n            '/script-pusher/run-system-tool?script='\n        ];\n        this.state = {\n            allData: '',\n            selectedValue: '',\n            endPointIndex: 0\n        };\n    }\n\n    runScript = (path, script) => {\n        const that = this;\n        if (!script) {\n            return;\n        }\n        fetch(path + script)\n            .then(function(response) {\n                return response.json();\n            })\n            .then(function(json) {\n                console.log('allData', json.allData);\n                console.log('result', json.result);\n                console.log('code', json.code);\n                console.log('error', json.error);\n                let info = '';\n                if (json.result === 'error') {\n                    info = json.error;\n                } else if (script === 'CpuInfo') {\n                    var regex1 = RegExp('model name.*', 'g');\n                    let array1 = regex1.exec(json.allData);\n                    while (array1 !== null) {\n                        info += array1[0] + '\\n';\n                        console.log(`Found ${array1[0]}.`);\n                        array1 = regex1.exec(json.allData);\n                    }\n                } else {\n                    info = json.allData;\n                }\n                that.setState({ allData: info });\n            })\n            .catch(function(ex) {\n                console.log(\n                    'parsing failed, URL bad, network down, or similar',\n                    ex\n                );\n            });\n    };\n\n    handleChange = event => {\n        const selectedValue = event.target.value;\n        const endPointIndex = event.target.getAttribute('data-endpoint');\n        console.log('HANDLE CHANGE', selectedValue);\n        this.setState({\n            ...this.state,\n            selectedValue: selectedValue,\n            endPointIndex: endPointIndex\n        });\n    };\n\n    handleSubmit = event => {\n        this.setState({ allData: '' });\n        console.log('A name was submitted: ', this.state);\n        this.runScript(\n            this.dataEndPoints[this.state.endPointIndex],\n            this.state.selectedValue\n        );\n        event.preventDefault();\n    };\n\n    render() {\n        const radioWeb = (\n            <div className=\"container\">\n                <form onSubmit={this.handleSubmit}>\n                    <fieldset>\n                        <div className=\"elf-form-field\">\n                            <legend>Local Services</legend>\n                            <input\n                                type=\"radio\"\n                                name=\"app-choice\"\n                                data-endpoint=\"0\"\n                                value=\"CpuInfo\"\n                                id=\"elf-radio-cpu\"\n                                onChange={this.handleChange}\n                            />\n                            <label htmlFor=\"elf-radio-cpu\">CpuInfo</label>\n\n                            <input\n                                type=\"radio\"\n                                name=\"app-choice\"\n                                data-endpoint=\"0\"\n                                value=\"VersionCheck\"\n                                id=\"elf-radio-version\"\n                                onChange={this.handleChange}\n                            />\n                            <label htmlFor=\"elf-radio-version\">\n                                Version Info\n                            </label>\n\n                            <input\n                                type=\"radio\"\n                                name=\"app-choice\"\n                                data-endpoint=\"1\"\n                                value=\"uptime\"\n                                id=\"elf-uptime-web\"\n                                onChange={this.handleChange}\n                            />\n                            <label htmlFor=\"elf-uptime-web\">Uptime</label>\n                        </div>\n                        <div className=\"form-group\">\n                            <button type=\"submit\" className=\"btn btn-primary\">\n                                Run System Script\n                            </button>\n                        </div>\n                    </fieldset>\n                </form>\n            </div>\n        );\n\n        return (\n            <div className=\"App\">\n                <ElfHeader />\n                <main>\n                    <section>{radioWeb}</section>\n                    <section>\n                        <pre>{this.state.allData}</pre>\n                    </section>\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') ===\n                    -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}